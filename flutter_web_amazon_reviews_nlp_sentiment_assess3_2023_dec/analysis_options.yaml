## This file configures the analyzer, which statically analyzes Dart code to
## check for errors, warnings, and lints.
##
## The issues identified by the analyzer are surfaced in the UI of Dart-enabled
## IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
## invoked from the command line by running `flutter analyze`.
#
## The following line activates a set of recommended lints for Flutter apps,
## packages, and plugins designed to encourage good coding practices.
#include: package:flutter_lints/flutter.yaml
#
#linter:
#  # The lint rules applied to this project can be customized in the
#  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
#  # included above or to enable additional rules. A list of all available lints
#  # and their documentation is published at https://dart.dev/lints.
#  #
#  # Instead of disabling a lint rule for the entire project in the
#  # section below, it can also be suppressed for a single line of code
#  # or a specific dart file by using the `// ignore: name_of_lint` and
#  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
#  # producing the lint.
#  rules:
#    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
#    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
#
## Additional information about this file can be found at
## https://dart.dev/guides/language/analysis-options


# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# We have selected Very Good Analysis for linting purposes as it has roughly double the amount of
# rules of the default `flutter_lints` - more rules == better, more consistent code.
# Flutter Linting Comparison: https://rydmike.com/blog_flutter_linting.html#what-are-the-rule-differences-between-all-these-packages
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  exclude:
    - '**/*.g.dart'
    - 'build/**'
    - 'test/**.mocks.dart'
    - 'test/mocks/*.dart'
    - 'lib/localization/**.dart'
    - 'lib/localization/intl/**.dart'

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    comment_references: false
    lines_longer_than_80_chars: false
    prefer_int_literals: false
    public_member_api_docs: false
    require_trailing_commas: false
    sort_pub_dependencies: false
    flutter_style_todos: false

    # TODO(PJ): Re-enable these in prod mode
    avoid_print: false
    cascade_invocations: false
